#
# Copyright (c) 2019 The Aquarium Project Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.
#

import("third_party/dawn/scripts/dawn_features.gni")

if (is_mac) {
  import("build/config/mac/mac_sdk.gni")
}

declare_args() {
  enable_dawn = is_win || is_linux || is_mac
  enable_angle = false
  enable_d3d12 = is_win
  enable_opengl = is_win || is_linux || is_mac
}

# RapidJSON is used by both Aquarium and ANGLE tests, so the ideal path
# should be //third_party/rapidjson. However, ANGLE cannot be configured
# to use that path.
rapidjson_dir = "//third_party/angle/third_party/rapidjson"

executable("aquarium") {
  libs = []

  if (is_mac) {
    frameworks = []
    weak_frameworks = []
  }

  sources = [
    "source/Aquarium.cpp",
    "source/Aquarium.h",
    "source/Assert.h",
    "source/Behavior.cpp",
    "source/Behavior.h",
    "source/Buffer.h",
    "source/BufferManager.cpp",
    "source/BufferManager.h",
    "source/Context.cpp",
    "source/Context.h",
    "source/ContextFactory.cpp",
    "source/ContextFactory.h",
    "source/FishModel.cpp",
    "source/FishModel.h",
    "source/Main.cpp",
    "source/Matrix.h",
    "source/Model.cpp",
    "source/Model.h",
    "source/Program.cpp",
    "source/Program.h",
    "source/ResourceHelper.cpp",
    "source/ResourceHelper.h",
    "source/SeaweedModel.h",
    "source/Texture.cpp",
    "source/Texture.h",
    "source/FPSTimer.cpp",
    "source/FPSTimer.h",
  ]

  deps = [
    "$rapidjson_dir:rapidjson",
    "third_party:glfw",
    "third_party:imgui",
    "third_party:stb",
  ]

  include_dirs = [
    "third_party/stb",
    "third_party/imgui",
    "third_party/imgui/examples",
    "third_party/glfw/include",
    "third_party/cxxopts/include",
  ]

  defines = [
    "CXXOPTS_NO_EXCEPTIONS",
    "CXXOPTS_NO_RTTI",
  ]
  if (is_win) {
    defines += [ "GLFW_EXPOSE_NATIVE_WIN32" ]
  }
  if (is_linux) {
    defines += [ "GLFW_EXPOSE_NATIVE_X11" ]
  }
  if (is_mac) {
    defines += [ "GLFW_EXPOSE_NATIVE_COCOA" ]
  }

  ldflags = []

  if (is_mac) {
    cflags_objcc = []
  }

  if (enable_angle || enable_opengl) {
    sources += [
      "source/opengl/BufferGL.cpp",
      "source/opengl/BufferGL.h",
      "source/opengl/ContextGL.cpp",
      "source/opengl/ContextGL.h",
      "source/opengl/FishModelGL.cpp",
      "source/opengl/FishModelGL.h",
      "source/opengl/GenericModelGL.cpp",
      "source/opengl/GenericModelGL.h",
      "source/opengl/InnerModelGL.cpp",
      "source/opengl/InnerModelGL.h",
      "source/opengl/OutsideModelGL.cpp",
      "source/opengl/OutsideModelGL.h",
      "source/opengl/ProgramGL.cpp",
      "source/opengl/ProgramGL.h",
      "source/opengl/SeaweedModelGL.cpp",
      "source/opengl/SeaweedModelGL.h",
      "source/opengl/TextureGL.cpp",
      "source/opengl/TextureGL.h",
      "source/opengl/imgui_impl_opengl3.cpp",
      "source/opengl/imgui_impl_opengl3.h",
    ]
  }

  if (enable_angle) {
    enable_dawn = false
    enable_d3d12 = false

    defines += [
      "ENABLE_ANGLE_BACKEND",
      "GL_GLES_PROTOTYPES",
      "EGL_EGL_PROTOTYPES",
      "GL_GLEXT_PROTOTYPES",
      "IMGUI_IMPL_OPENGL_LOADER_CUSTOM",
      "IMGUI_IMPL_OPENGL_ES3",
    ]

    include_dirs += [ "third_party/angle/include" ]

    deps += [
      "third_party/angle:libANGLE",
      "third_party/angle:libEGL",
      "third_party/angle:libGLESv2",
    ]
  } else {
    deps += [ "third_party:glad" ]

    include_dirs += [ "third_party/glad/include" ]
    defines += [ "IMGUI_IMPL_OPENGL_LOADER_GLAD" ]
  }

  if (enable_dawn) {
    defines += [
      "ENABLE_DAWN_BACKEND",
      "DAWN_SKIP_ASSERT_SHORTHANDS",
    ]
    if (dawn_enable_d3d12) {
      defines += [ "DAWN_ENABLE_BACKEND_D3D12" ]
    }
    if (dawn_enable_metal) {
      defines += [ "DAWN_ENABLE_BACKEND_METAL" ]
    }
    if (dawn_enable_vulkan) {
      defines += [ "DAWN_ENABLE_BACKEND_VULKAN" ]
    }

    include_dirs += [ "third_party/dawn/src" ]

    if (dawn_enable_metal) {
      if (is_mac) {
        frameworks += [
          "AppKit.framework",
          "QuartzCore.framework",
        ]
        if (mac_min_system_version == "10.10.0") {
          weak_frameworks += [ "Metal.framework" ]
        } else {
          frameworks += [ "Metal.framework" ]
        }
      }
    }
    if (dawn_enable_vulkan) {
      if (is_linux) {
        libs += [ "dl" ]
      }
    }

    sources += [
      "source/dawn/BufferDawn.cpp",
      "source/dawn/BufferDawn.h",
      "source/dawn/BufferManagerDawn.cpp",
      "source/dawn/BufferManagerDawn.h",
      "source/dawn/ContextDawn.cpp",
      "source/dawn/ContextDawn.h",
      "source/dawn/FishModelDawn.cpp",
      "source/dawn/FishModelDawn.h",
      "source/dawn/FishModelInstancedDrawDawn.cpp",
      "source/dawn/FishModelInstancedDrawDawn.h",
      "source/dawn/GenericModelDawn.cpp",
      "source/dawn/GenericModelDawn.h",
      "source/dawn/InnerModelDawn.cpp",
      "source/dawn/InnerModelDawn.h",
      "source/dawn/OutsideModelDawn.cpp",
      "source/dawn/OutsideModelDawn.h",
      "source/dawn/PlatformContextDawn.h",
      "source/dawn/ProgramDawn.cpp",
      "source/dawn/ProgramDawn.h",
      "source/dawn/SeaweedModelDawn.cpp",
      "source/dawn/SeaweedModelDawn.h",
      "source/dawn/TextureDawn.cpp",
      "source/dawn/TextureDawn.h",
      "source/dawn/imgui_impl_dawn.cpp",
      "source/dawn/imgui_impl_dawn.h",
    ]
    if (dawn_enable_metal) {
      sources += [ "source/dawn/PlatformContextDawn.mm" ]
    } else {
      sources += [ "source/dawn/PlatformContextDawn.cpp" ]
    }

    deps += [
      "third_party/vulkan-deps/spirv-tools/src:SPIRV-Tools",
      "third_party/dawn/src/dawn:dawn_headers",
      "third_party/dawn/src/dawn:dawn_proc",
      "third_party/dawn/src/dawn:dawncpp",
      "third_party/dawn/src/dawn_native",
      "third_party/vulkan-deps/glslang/src:glslang_sources",
    ]
    if (dawn_enable_vulkan) {
      deps += [ "third_party/dawn/third_party/khronos:vulkan_headers" ]
    }

    if (dawn_enable_metal) {
      if (is_mac) {
        if (mac_deployment_target == "10.10.0") {
          cflags_objcc += [ "-Wno-unguarded-availability" ]
        }
      }
    }
  }

  if (enable_d3d12) {
    defines += [ "ENABLE_D3D12_BACKEND" ]

    libs += [
      "d3d12.lib",
      "dxgi.lib",
      "d3dcompiler.lib",
    ]

    sources += [
      "source/d3d12/BufferD3D12.cpp",
      "source/d3d12/BufferD3D12.h",
      "source/d3d12/ContextD3D12.cpp",
      "source/d3d12/ContextD3D12.h",
      "source/d3d12/FishModelD3D12.cpp",
      "source/d3d12/FishModelD3D12.h",
      "source/d3d12/FishModelInstancedDrawD3D12.cpp",
      "source/d3d12/FishModelInstancedDrawD3D12.h",
      "source/d3d12/GenericModelD3D12.cpp",
      "source/d3d12/GenericModelD3D12.h",
      "source/d3d12/InnerModelD3D12.cpp",
      "source/d3d12/InnerModelD3D12.h",
      "source/d3d12/OutsideModelD3D12.cpp",
      "source/d3d12/OutsideModelD3D12.h",
      "source/d3d12/ProgramD3D12.cpp",
      "source/d3d12/ProgramD3D12.h",
      "source/d3d12/SeaweedModelD3D12.cpp",
      "source/d3d12/SeaweedModelD3D12.h",
      "source/d3d12/TextureD3D12.cpp",
      "source/d3d12/TextureD3D12.h",
      "source/d3d12/imgui_impl_dx12.cpp",
      "source/d3d12/imgui_impl_dx12.h",
    ]
  }

  if (enable_opengl) {
    defines += [ "ENABLE_OPENGL_BACKEND" ]
  }

  cflags_cc = [
    "-Wno-string-conversion",
    "-Wno-unused-result",
    "-Wno-format-security",
    "-Wno-microsoft-enum-forward-reference",
  ]
}
